## loop over all presentations and create functions
#foreach ($rep in $cls.listAggregatedPropertyRepresentations($prop))
	#set($range = $rep.getRangeJava())
	#set($rangeOutFull = $rep.getRangeJavaFull())
	#set($rangeInFull = $rep.getRangeInterfaceJavaFull())
	#set($suffix = $rep.getJavaMethodSuffix())
	#set($multipleDeprecated = $rep.getMultipleDeprecated())
	#set($singleDeprecated = $rep.getSingleDeprecated())

	public boolean has$propnameCaps($rangeInFull #mixedlowercase($range)Value) {
		return hasProperty(${pkgBase}.${pkgTools}.${vocabName}.${propname}, #mixedlowercase($range)Value);
	}

	#if($rep.isMultipleEnabled())
		$multipleDeprecated
		public int count$propnameCaps$suffix() {
			int count = 0;
			Iterator<$rangeOutFull> it = iterate${propnameCaps}${suffix}();
			while (it.hasNext()) {
				it.next();
				count++;
			}
			return count;
		}

		$multipleDeprecated
		public Iterator<$rangeOutFull> iterate${propnameCaps}${suffix}() {
			ExtendedIterator<Statement> it = listProperties(${pkgBase}.${pkgTools}.${vocabName}.${propname});
			return it.mapWith(${rangeOutFull}.statementMapper).filterDrop(${rangeOutFull}.nullFilter);
		}

		$multipleDeprecated
		public List<$rangeOutFull> list${propnameCaps}${suffix}() {
			List<$rangeOutFull> list = new ArrayList<$rangeOutFull>();
			Iterator<$rangeOutFull> it = iterate${propnameCaps}${suffix}();
			while (it.hasNext()) {
				$rangeOutFull inst = it.next();
				list.add(inst);
			}
			return list;
		}

		$multipleDeprecated
		public void add$propnameCaps${suffix}($rangeInFull #mixedlowercase($range)Value) {
			addProperty(${pkgBase}.${pkgTools}.${vocabName}.${propname}, #mixedlowercase($range)Value);
		}

		$multipleDeprecated
		public void addAll$propnameCaps${suffix}(List<? extends $rangeInFull> #mixedlowercase($range)List) {
			for ($rangeInFull o : #mixedlowercase($range)List)
				add$propnameCaps${suffix}(o);

		}

		$multipleDeprecated
		public void remove$propnameCaps${suffix}($rangeInFull #mixedlowercase($range)Value) {
			removeProperty(${pkgBase}.${pkgTools}.${vocabName}.${propname}, #mixedlowercase($range)Value);
		}

		$multipleDeprecated
		public void removeAll$propnameCaps${suffix}() {
					removeAll(${pkgBase}.${pkgTools}.${vocabName}.${propname});
		}
	#end

	#if($rep.isSingleEnabled())
		$singleDeprecated
		public $rangeOutFull get$propnameCaps${suffix} () {
			RDFNode n = getPropertyValue(${pkgBase}.${pkgTools}.${vocabName}.${propname});
			if (n.canAs(${rangeOutFull}.class))
				return ($rangeOutFull) n.as(${rangeOutFull}.class);
			else {
				log.warn("Could not convert ${propname} of " + getURI() + " (" + n + ") to type $range");
				return null;
			}
		}

		$singleDeprecated
		public void set$propnameCaps${suffix}($rangeInFull #mixedlowercase($range)Value) {
			removeAll(${pkgBase}.${pkgTools}.${vocabName}.${propname});
			setPropertyValue(${pkgBase}.${pkgTools}.${vocabName}.${propname}, #mixedlowercase($range)Value);
		}

		$singleDeprecated
		public void remove$propnameCaps${suffix}() {
			removeAll(${pkgBase}.${pkgTools}.${vocabName}.${propname});
		}
	#end
#end