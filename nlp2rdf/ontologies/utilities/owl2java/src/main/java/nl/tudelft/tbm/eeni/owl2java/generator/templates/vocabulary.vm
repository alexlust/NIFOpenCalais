package $vocabPkg;


import java.util.ArrayList;
import java.util.List;

import com.hp.hpl.jena.ontology.*;
import com.hp.hpl.jena.rdf.model.*;

/**
 * A vocabulary for all properties, classes etc. used
 * in the ontology. This is based on the jena schemagen
 * output
 *
 * Note, that the current implementation assumes unique names
 * for class names.
 */
public class $vocabName {
	public static final List<String> NAMESPACES;

	#foreach ($ns in $jmodel.listNamespaceURIs())
		#set($prefix = $jmodel.getPrefix($ns))
		public static final Resource NS#uppercase($prefix);
	#end

	#foreach ($cls in $jmodel.listJClasses())
		public static final OntClass $cls.getJavaClassName();
	#end

	#foreach ($p in $jmodel.listJProperties())
		#if ($p.isDataTypeProperty())
			public static final DatatypeProperty $p.getJavaName();
		#else
			public static final ObjectProperty $p.getJavaName();
		#end ## isDataTypeProperty
	#end

	static {
		NAMESPACES = new ArrayList<String>();
		#foreach($ns in $jmodel.listNamespaceURIs())
			NAMESPACES.add("$ns");
		#end

		OntModel resourceModel = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM, null);

		#foreach ($ns in $jmodel.listNamespaceURIs())
			#set($prefix = $jmodel.getPrefix($ns))
			NS#uppercase($prefix) = resourceModel.createResource("$ns");
		#end

		#foreach ($cls in $jmodel.listJClasses())
			$cls.getJavaClassName() = resourceModel.createClass("$cls.getMapUri()");
		#end

		#foreach ($p in $jmodel.listJProperties())
			#if ($p.isDataTypeProperty())
				$p.getJavaName() = resourceModel.createDatatypeProperty("$p.getMapUri()");
			#else
				$p.getJavaName() = resourceModel.createObjectProperty("$p.getMapUri()");
			#end ## isDataTypeProperty
		#end
	}
}