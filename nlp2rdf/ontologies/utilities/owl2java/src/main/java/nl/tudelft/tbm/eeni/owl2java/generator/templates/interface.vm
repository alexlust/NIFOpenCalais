package $cls.getJavaPackageName();

import java.util.List;
import java.util.Iterator;

import com.hp.hpl.jena.ontology.Individual;

/**
 * Interface $cls.getMapUri()
 */


public interface $cls.getJavaInterfaceName() extends Individual
#foreach ($superClass in $cls.listDirectSuperClasses())
	, $superClass.getJavaInterfaceFullName()
#end {

##
## loop over all properties and its presentations
##

## generate prefix function stuff + for each presentation
#foreach($prop in $cls.listAggregatedProperties())
	#set($propnameCaps = $prop.getJavaNameCaps())
	/**
	 * Domain property $propnameCaps
	 * with uri $prop.getMapUri()
	 */

	## loop over all presentations and create functions
	#foreach ($rep in $cls.listAggregatedPropertyRepresentations($prop))
		#set($range = $rep.getRangeJava())
		#if($prop.isObjectProperty())
			#set($rangeOutFull = $rep.getRangeJavaFull())
			#set($rangeInFull = $rep.getRangeInterfaceJavaFull())
			#set($rangeListInFull = "? extends " + $rep.getRangeInterfaceJavaFull())
		#else
			#set($rangeOutFull = $rep.getRangeJavaFull())
			#set($rangeInFull = $rep.getRangeJavaFull())
			#set($rangeListInFull = $rep.getRangeJavaFull())
		#end

		#set($suffix = $rep.getJavaMethodSuffix())
		#set($multipleDeprecated = $rep.getMultipleDeprecated())
		#set($singleDeprecated = $rep.getSingleDeprecated())

		public boolean exists$propnameCaps();
		public boolean has$propnameCaps${suffix}($rangeInFull #mixedlowercase($range)Value);

		#if($rep.isMultipleEnabled())
			$multipleDeprecated
			public int count$propnameCaps$suffix();
			$multipleDeprecated
			public Iterator<$rangeOutFull> iterate${propnameCaps}${suffix}();
			$multipleDeprecated
			public List<$rangeOutFull> list${propnameCaps}${suffix}();
			$multipleDeprecated
			public void add$propnameCaps${suffix}($rangeInFull #mixedlowercase($range)Value);
			$multipleDeprecated
			public void addAll$propnameCaps${suffix}(List<$rangeListInFull> #mixedlowercase($range)List);
			$multipleDeprecated
			public void remove$propnameCaps${suffix}($rangeInFull #mixedlowercase($range)Value);
			$multipleDeprecated
			public void removeAll$propnameCaps${suffix}();
		#end

		#if($rep.isSingleEnabled())
			$singleDeprecated
			public $rangeOutFull get$propnameCaps${suffix} ();
			$singleDeprecated
			public void set$propnameCaps${suffix}($rangeInFull #mixedlowercase($range)Value);
			$singleDeprecated
			public void remove$propnameCaps${suffix}();
		#end

	#end
#end
}